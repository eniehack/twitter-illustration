{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://chrome-extension/webpack/bootstrap","webpack://chrome-extension/webpack/runtime/make namespace object","webpack://chrome-extension/./src/background.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const BACKEND_URL = \"http://localhost:3030\";\nconst generateErrorMessage = (type) => ({\n    succeeded: false,\n    message: type === \"serverError\"\n        ? \"Server error.\"\n        : type === \"networkError\"\n            ? \"Network error.\"\n            : \"Invalid message.\",\n});\nchrome.runtime.onMessage.addListener((message, _, sendResponse) => {\n    if (message && message instanceof Object && \"type\" in message) {\n        // add a tweet\n        if (message.type === \"add-tweet\" &&\n            \"body\" in message &&\n            \"id\" in message.body) {\n            fetch(`${BACKEND_URL}/tweet`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ id: message.body.id }),\n            })\n                .then((response) => {\n                const messageResponse = response.ok\n                    ? { succeeded: true, message: \"Added a tweet.\" }\n                    : generateErrorMessage(\"serverError\");\n                sendResponse(messageResponse);\n            })\n                .catch(() => {\n                sendResponse(generateErrorMessage(\"networkError\"));\n            });\n            return true;\n        }\n        // get the stored tweet list\n        if (message.type === \"get-tweets\") {\n            fetch(`${BACKEND_URL}/tweet`, { method: \"GET\" })\n                .then((response) => {\n                if (!response.ok) {\n                    sendResponse(generateErrorMessage(\"serverError\"));\n                }\n                else {\n                    response.json().then((json) => {\n                        sendResponse({\n                            succeeded: true,\n                            body: json,\n                        });\n                    });\n                }\n                return;\n            })\n                .catch(() => {\n                sendResponse(generateErrorMessage(\"networkError\"));\n            });\n            return true;\n        }\n    }\n    // invalid message\n    sendResponse(generateErrorMessage(\"invalidMessage\"));\n    return true;\n});\nexport {};\n"],"names":[],"sourceRoot":""}